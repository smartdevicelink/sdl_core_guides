@startuml


package "visible for any SDL components" #DDDDDD {

interface Logger {
  + bool isEnabledFor(component, LogLevel) = 0;
  + void DeInit() = 0;
  + void Flush() = 0;
  + void PushLog(LogMessage) = 0;
  + Logger& instance(Logger* initializer = nullptr) = 0;
  + void InitLoggerSettings(LoggerSettings) = 0;
  + void InitFlushLogsTimePoint(TimePoint) = 0;
}

class AutoTrace {
  + AutoTrace()
  + ~AutoTrace()
}

class LocationInfo {
  + file_name
  + function_name
  + line_number
}

abstract TimePoint{}

class LogMessage {
  + string component_
  + LogLevel log_level_
  + string log_event_
  + TimePoint timestamp_
  + LocationInfo location_
  + thread_id thread_id_
}


enum  LogLevel { 
  TRACE_LEVEL
  DEBUG_LEVEL
  INFO_LEVEL
  WARNING_LEVEL
  ERROR_LEVEL
  FATAL_LEVEL
}

abstract LogMacro {
  SDL_CREATE_LOG_VARIABLE
  SDL_CREATE_LOCAL_LOG_VARIABLE
  SDL_FLUSH_LOGGER
  SDL_DEINIT_LOGGER
  SDL_LOG_TRACE
  SDL_LOG_AUTO_TRACE
  SDL_LOG_DEBUG
  SDL_LOG_INFO
  SDL_LOG_WARN
  SDL_LOG_WARN_WITH_ERRNO
  SDL_LOG_ERROR
  SDL_LOG_ERROR_WITH_ERRNO
  SDL_LOG_FATAL
}

AutoTrace -down-> Logger
LogMacro  -down-> Logger
LogMacro .right.> LogMessage : create
LogMessage *-- LocationInfo
LogMessage *-- TimePoint
LogMessage *-- LogLevel
}


interface ThirdPartyLoggerInterface {
  + Init() = 0;
  + Deinit() = 0;
  IsEnabledFor(string, LogLevel) = 0;
  PushLog(LogMessage) = 0;
}


package "have access to log4cxx library" #DDDDDD {

class Log4CXXLogger  {
  log4cxx bindings:
  - LogLevel to Log4CxxLogLevel 
  - TimeStamp  to Log4CxxTimeStamp
  - LocationInfo  to Log4CxxLocationInfo
}

Log4CXXLogger -up-|> ThirdPartyLoggerInterface
class "log4cxx::" as log4cxx
log4cxx <-right- Log4CXXLogger

}


package "visible only for Main/TestMain" #DDDDDD {

interface LoggerInitializer  {
  + void Init(ThirdPartyLoggerInterface* impl_) = 0;
}


class LoggerImpl  {
  loop_thread
  ThirdPartyLoggerInterface* impl_
  Logger& instance(Logger* init_value);
}

}
 
note "\
Logger& Logger::instance(Logger* pre_init) { \n\
  static Logger* instance_ = nullptr; \n\
  if (pre_init) { \n\
    assert(instance_ == nullptr);\n\
    instance_ = pre_init;\n\
  }\n\
  return *instance_;\n\
}" as N1
LoggerImpl .right. N1 

LoggerImpl -up-|> Logger
LoggerImpl -up-|> LoggerInitializer


LoggerImpl *-left-> ThirdPartyLoggerInterface : proxy calls



class Main

Main .up.> LoggerImpl  
Main  .up.> Log4CXXLogger : create
note "Main(orTestMain) creates LoggerImpl,  \n\
ExternalLogger Injects ExternalLogger to LoggerImpl, \n\
Takes care about LoggerImpl life cycle" as N2

N2 .left. Main
@enduml
